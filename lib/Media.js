// Generated by CoffeeScript 1.10.0
(function() {
  var Media, debug, pubsub;

  pubsub = require('./PubSub');

  debug = require('debug')('xbmc:Media');

  Media = (function() {
    function Media() {}

    Media.mixin = function(api) {
      var method, name;
      debug('mixin');
      this.api = api;
      api.media = {};
      for (name in this) {
        method = this[name];
        api.media[name] = method;
      }
      return delete api.media.mixin;
    };

    Media._result = function(data, field, evt, defaultValue, fn) {
      var d;
      d = data.result[field] ? Media.api.scrub(data.result[field]) : defaultValue;
      pubsub.emit('api:' + evt, d);
      if (fn) {
        fn(d);
      }
      return d;
    };

    Media.tvshows = function(options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      debug('tvshows', options);
      args = {
        properties: options.properties || [],
        sort: options.sort || {},
        limits: options.limits || {}
      };
      dfd = Media.api.send('VideoLibrary.GetTVShows', args);
      return dfd.then(function(data) {
        return Media._result(data, 'tvshows', 'tvshow', [], fn);
      });
    };

    Media.tvshow = function(id, options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      debug('tvshow', id, options);
      args = {
        tvshowid: id,
        properties: options.properties || []
      };
      dfd = Media.api.send('VideoLibrary.GetTVShowDetails', args);
      return dfd.then(function(data) {
        return Media._result(data, 'tvshowdetails', 'tvshow', null, fn);
      });
    };

    Media.episodes = function(tvshowid, season, options, fn) {
      var args, dfd;
      if (tvshowid == null) {
        tvshowid = -1;
      }
      if (season == null) {
        season = -1;
      }
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      debug('episodes', options);
      args = {
        properties: options.properties || [],
        sort: options.sort || {},
        limits: options.limits || {}
      };
      if (tvshowid >= 0) {
        args.tvshowid = tvshowid;
      }
      if (season >= 0) {
        args.season = season;
      }
      dfd = Media.api.send('VideoLibrary.GetEpisodes', args);
      return dfd.then(function(data) {
        return Media._result(data, 'episodes', 'episodes', [], fn);
      });
    };

    Media.episode = function(id, options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      debug('episode', id, options);
      args = {
        episodeid: id,
        properties: options.properties || ['title', 'showtitle', 'plot', 'season', 'episode', 'thumbnail']
      };
      dfd = Media.api.send('VideoLibrary.GetEpisodeDetails', args);
      return dfd.then(function(data) {
        return Media._result(data, 'episodedetails', 'episode', null, fn);
      });
    };

    Media.movies = function(options, fn) {
      var args, dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      debug('movies', options);
      args = {
        properties: options.properties || [],
        sort: options.sort || {},
        limits: options.limits || {}
      };
      dfd = Media.api.send('VideoLibrary.GetMovies', args);
      return dfd.then(function(data) {
        return Media._result(data, 'movies', 'movies', [], fn);
      });
    };

    Media.movie = function(id, options, fn) {
      var dfd;
      if (options == null) {
        options = {};
      }
      if (fn == null) {
        fn = null;
      }
      debug('movie', id, options);
      if (typeof options === 'function') {
        fn = options;
        options = null;
      }
      options = options || {};
      dfd = Media.api.send('VideoLibrary.GetMovieDetails', {
        movieid: id,
        properties: options.properties || ['title', 'year', 'plotoutline', 'plot', 'thumbnail']
      });
      return dfd.then(function(data) {
        return Media._result(data, 'moviedetails', 'movie', null, fn);
      });
    };

    return Media;

  })();

  module.exports = Media;

}).call(this);
